@page "/card"
@using ShoppingList.Data
@inject ShoppingListService ShoppingListService

<div class="shoppingCard">
	<div class="headerInfo">
		<div class ="title">
		<h4 >
			Shopping List
		</h4>
		</div>
	</div>
	<div>
		<form @onsubmit=AddItem>
			<div class="inputField">
				<div class="pageIcon">
					<img src="images/pageicon1.jpg" height="50" width="50" />
				</div>
				<input type="text" placeholder="what do you need ...?" @bind="newItem" autofocus />
				<button class="delBtn  @(anyIsDone ? "delFlagColor" : "")" type="reset" @onclick="DeleteItems"><i class="fas fa-trash-alt" style="font-size:24px"></i></button>
			</div>
		</form>
		<div class="dynDetails">
				<div class="selectAndCountRow">
					<div class="selectAllRow">
					<p class="selectAllRowCheckbox"><input type="checkbox" unchecked @bind="isAllDone" @onclick="IsAllDone" class="form-check-input" /></p>
					@if(@isAllDone){
					<p class="selectAllRowText">Deselect All</p>
					}
					else
					{
					<p class="selectAllRowText">Select All</p>
					}
				</div>

				@if (@items.Count(item => !item.IsDone) == 1)
				{
					<h4 class="countItems"> (1 item to find)</h4>
				}
				else
				{
					<h4 class="countItems">(@items.Count(item => !item.IsDone) items to find)</h4>
				}

				</div>
			<ul class="list">
				@foreach (ShoppingListItem item in items)
				{
					<li class="itemRow">
						<div class="itemDetail">
							<p class="rowCheckBox"><input type="checkbox" class="form-check-input" @bind="item.IsDone" /></p>
							<a class="item @ItemDone(item) @itemRowIsDoneClass">@item.Item</a>
							@* <p class="rowItem @ItemDone(item)"><a class="item @ItemDone(item) @itemRowIsDoneClass">@item.Item</a></p> *@
						</div>
						<div class="editAndDelBtns">
							@if(!item.IsDone)
							{
								<p class="editBtn"><button class="editBtn" @onclick="@(() => EditItem(item))"><i class="fa-regular fa-pen-to-square" style="font-size:24px;"></i>

								</button>

								</p>
							}
						</div>
					</li>
				}
			</ul>
		</div>
	</div>
</div>

@code
{
	List<ShoppingListItem> items = new List<ShoppingListItem>();
	string? newItem;
	bool isAllDone = false;
	public string itemRowIsDoneClass = "";
	public bool isChecked;
	public bool anyIsDone;
	string delFlag = "";

	public async void IsAllDone()
	{
		isChecked = isChecked ? false : true;

		foreach (ShoppingListItem item in items)
		{

			item.IsDone = isChecked ? true : false;
		}
		await ShoppingListService.SaveItems(items);
	}

	public async Task ItemDone(ShoppingListItem item)
	{
		if (!item.IsDone && isChecked)
		{
			isChecked = false;

		}

		isAllDone = false;
		var itemRowIsDoneResult = item.IsDone ? "item-done" : "";

		await HandleAnyIsDone();
		// anyIsDone = items.Any(i => i.IsDone);
		// string delFlagResult = anyIsDone ? "delFlagColor" : "";

		await ShoppingListService.SaveItems(items);

		itemRowIsDoneClass = itemRowIsDoneResult;
		// delFlag = delFlagResult;		
	}

	async Task HandleAnyIsDone()
	{
		anyIsDone = items.Any(i => i.IsDone);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		var itemList = ShoppingListService.LoadItems();
		items.AddRange(itemList);
	}

	async void AddItem()
	{
		if (string.IsNullOrWhiteSpace(newItem))
			return;

		items.Add(new ShoppingListItem
			{
				Item = newItem
			});

		await ShoppingListService.SaveItems(items);
		newItem = string.Empty;
	}

	async Task EditItem(ShoppingListItem item)
	{
		string result = await Application.Current.MainPage.DisplayPromptAsync("Edit Item", "", initialValue: item.Item, maxLength: 100, keyboard: Keyboard.Default);
		if(result is not null)
		{
			item.Item = result;
			await ShoppingListService.SaveItems(items);
		}
		
		// newItem = string.Empty;
		// await Application.Current.MainPage.DisplayAlert("Success", "Item updated", "OK");
	}

	
	// 	// https://www.telerik.com/blogs/blazor-basics-creating-todo-app-using-blazor-server#:~:text=Removing%20a%20Todo%20Item&text=First%2C%20let's%20add%20a%20Delete%20method%20to%20the%20ITodoService%20interface.&text=Next%2C%20we%20need%20to%20implement%20it%20in%20the%20TodoService%20class.&text=C%23-,In%20the%20Index.,use%20in%20the%20component's%20template.


	public void ItemsChanged()
	{
		items = ShoppingListService.LoadItems().ToList();
		OnInitialized();
	}

	public async Task DeleteItems()
	{
		IEnumerable<ShoppingListItem> itemsToDelete =  new List<ShoppingListItem>();
		itemsToDelete = items.Where(i => !i.IsDone);
		await ShoppingListService.SaveItems(itemsToDelete);
		items = new List<ShoppingListItem>();
		isAllDone = false;
		OnInitialized();

	}
}