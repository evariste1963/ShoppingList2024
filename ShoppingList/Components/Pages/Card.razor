@page "/card"
@using ShoppingList.Data
@inject ShoppingListService ShoppingListService

<div class="shoppingCard">
	<div class="headerInfo">
		<h1 class="title">
			Shopping List
		</h1>
	</div>
	<div>
		<form @onsubmit=AddItem>
			<div class="inputField">
				<input type="text" placeholder="what do you need?" @bind="newItem" autofocus />
				<button class="delBtn" type="reset" @onclick="DeleteItems"><i class="fas fa-trash-alt" style="font-size:2rem;"></i></button>
			</div>
		</form>
		<div class="dynDetails">
				<div class="selectAndCountRow">
					<div class="selectAllRow">
					<p class="selectAllRowCheckbox"><input type="checkbox" unchecked @bind="isAllDone" @onclick="IsAllDone" class="form-check-input" /></p>
						<p class="selectAllRowText">Select All</p>
					</div>

					<h4 class="countItems">(@items.Count(item => !item.IsDone) items to find)</h4>
				</div>
			<ul class="list">
				@foreach (ShoppingListItem item in items)
				{
					<li class="itemRow">
						<div class="itemDetail">
							<p class="rowCheckBox"><input type="checkbox" class="form-check-input" @bind="item.IsDone" /></p>
							<p class="rowItem @ItemDone(item)"><input @bind="item.Item" class="item @ItemDone(item)" /></p>
						</div>
						<div class="editAndDelBtns">
							<p class="editBtn"><button class="editBtn" @onclick="@(() => EditItem(item))"><i class="fa fa-save" style="font-size:24px;"></i></button></p>
						<p class="rowDel"><button class="delBtn" @onclick="@(() => DeleteItem(item))"><i class="fa fa-times fa-2x" style="font-size:24px;"></i></button></p>
						</div>
					</li>
				}
			</ul>
		</div>
	</div>
</div>



@code
{
	List<ShoppingListItem> items = new List<ShoppingListItem>();
	string? newItem;
	bool isAllDone;

	public async void IsAllDone()
	{
		foreach (ShoppingListItem item in items)
		{
			if(!isAllDone)
			{
				item.IsDone = true;
			}
			else
			{
				item.IsDone = false;
			}
		}		
		await ShoppingListService.SaveItems(items);
	}


	protected override void OnInitialized()
	{
		base.OnInitialized();
		var itemList = ShoppingListService.LoadItems();

		items.AddRange(itemList);
	}

	async void AddItem()
	{

		if (string.IsNullOrWhiteSpace(newItem))
			return;

		items.Add(new ShoppingListItem
			{
				Item = newItem
			});

		await ShoppingListService.SaveItems(items);
		newItem = string.Empty;
	}

	async Task EditItem(ShoppingListItem item)
	{

		await ShoppingListService.SaveItems(items);
		newItem = string.Empty;
		await Application.Current.MainPage.DisplayAlert("Success", "Item updated", "OK");
	}


	public async void DeleteItem(ShoppingListItem item)
	{
		IEnumerable<ShoppingListItem> itemToDelete = new List<ShoppingListItem>();
		if (!item.IsDone) return;

		itemToDelete = items.Where(i => i.Item != item.Item);
		await ShoppingListService.SaveItems(itemToDelete);
		items = new List<ShoppingListItem>();
		// StateHasChanged();
		OnInitialized();
		// https://www.telerik.com/blogs/blazor-basics-creating-todo-app-using-blazor-server#:~:text=Removing%20a%20Todo%20Item&text=First%2C%20let's%20add%20a%20Delete%20method%20to%20the%20ITodoService%20interface.&text=Next%2C%20we%20need%20to%20implement%20it%20in%20the%20TodoService%20class.&text=C%23-,In%20the%20Index.,use%20in%20the%20component's%20template.

	}

	public void ItemsChanged()
	{
		items = ShoppingListService.LoadItems().ToList();
		OnInitialized();
	}

	public async Task DeleteItems()
	{
		IEnumerable<ShoppingListItem> itemsToDelete =  new List<ShoppingListItem>();
		itemsToDelete = items.Where(i => !i.IsDone);
		await ShoppingListService.SaveItems(itemsToDelete);
		items = new List<ShoppingListItem>();
		isAllDone = false;
		OnInitialized();

	}

	public string ItemRowIsDoneClass = "";

	public string ItemDone(ShoppingListItem item)
	{
		ItemRowIsDoneClass = item.IsDone ? "item-done" : "  ";
		ShoppingListService.SaveItems(items);
		return ItemRowIsDoneClass;
	}


	/// <summary>
	/// TODOs list for App
	/// </summary>
	///

	// TODO: Colours: app colour scheme selector
	// 				// global varibles and dynamic css classes
	
	// 				// global variables to main font size
	
	//  TODO: Cursor focus App start and after enter
	// TODO: App ICON
	// TODO: only update if row text has changed




}