@page "/card"
@using ShoppingList.Data
@inject ShoppingListService ShoppingListService

<div class="shoppingCard" >
	<div class="headerInfo">
	<h1 class="title">
		Shopping List 
	</h1>
	<h4 class="countItems">(@items.Count(item => !item.IsDone) items)</h4>
	</div>
	
	<form @onsubmit=AddItem>
			<div class="inputField">
			@* <i id="quill" class="fa-solid fa-feather-pointed fa-2x"></i> *@
			<input type="text" placeholder="what do you need?"  @bind="newItem" autofocus  />
			<button class="delBtn" type="reset" @onclick="DeleteItems"><i class="fas fa-trash-alt"></i></button>
		</div>
	</form>
	
	@* <p class="selectAllRow"><input  type="checkbox" class="form-check-input selectAllCheckbox">Select All</p> *@
	<div >
		<ul class="list">
			@foreach (ShoppingListItem item in items)
			{
				<li class="itemRow">
					<div class="itemDetail">
					<p class="rowCheckBox"><input type="checkbox" class="form-check-input"  @bind="item.IsDone" /></p>
					<p class="rowItem @ItemDone(item)"><input @bind="item.Item" class="item @ItemDone(item)"></input></p>
					</div>
					<p class="rowEdit"><button class="editBtn" @onclick="@(() => EditItem(item))"><i class="fas fa-save"></i></button></p>
					<p class="rowDel"><button class="delBtn" @onclick="@(() => DeleteItem(item))"><i class="fa fa-times fa-2x"></i></button></p>
					
				</li>
			}
		</ul>
	</div>
	
</div>



@code
{
	List<ShoppingListItem> items = new List<ShoppingListItem>();
	string? newItem;


	protected override void OnInitialized()
	{
		base.OnInitialized();
		var itemList = ShoppingListService.LoadItems();

		items.AddRange(itemList);
	}

	async void AddItem()
	{

		if (string.IsNullOrWhiteSpace(newItem))
			return;

		items.Add(new ShoppingListItem
		{
			Item = newItem
		});

		await ShoppingListService.SaveItems(items);
		newItem = string.Empty;
	}

	async Task EditItem(ShoppingListItem item)
	{

		await ShoppingListService.SaveItems(items);
		newItem = string.Empty;
		await Application.Current.MainPage.DisplayAlert("Success", "Item updated", "OK");
	}


	public async void DeleteItem(ShoppingListItem item)
	{
		IEnumerable<ShoppingListItem> itemToDelete = new List<ShoppingListItem>();
		if (!item.IsDone) return;

			itemToDelete = items.Where(i => i.Item != item.Item);
			await ShoppingListService.SaveItems(itemToDelete);
			items = new List<ShoppingListItem>();
			// StateHasChanged();
			OnInitialized();
			// https://www.telerik.com/blogs/blazor-basics-creating-todo-app-using-blazor-server#:~:text=Removing%20a%20Todo%20Item&text=First%2C%20let's%20add%20a%20Delete%20method%20to%20the%20ITodoService%20interface.&text=Next%2C%20we%20need%20to%20implement%20it%20in%20the%20TodoService%20class.&text=C%23-,In%20the%20Index.,use%20in%20the%20component's%20template.
		
	}

public void ItemsChanged()
{
    items = ShoppingListService.LoadItems().ToList();
    OnInitialized();
}

	void  DeleteItems()
	{
		IEnumerable<ShoppingListItem> itemsToDelete = new List<ShoppingListItem>();
		itemsToDelete =  items.Where(i => !i.IsDone);
		ShoppingListService.SaveItems(itemsToDelete);
		items = new List<ShoppingListItem>();
		OnInitialized();

	}

	public string ItemDone(ShoppingListItem item)
{
    return item.IsDone ? "item-done":"  ";
}

}