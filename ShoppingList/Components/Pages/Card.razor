@page "/card"
@using ShoppingList.Data
@* @using BlazorAnimate *@
@inject ShoppingListService ShoppingListService

<div class="shoppingCard">
	<div class="headerInfo">
		<div class ="title">
		<h4 >
			Shopping List
		</h4>
		</div>
	</div>
	<div>
		<form @onsubmit=AddItem>
			<div class="inputField">
				
				<div class="pageIcon">
					<img src="images/pageicon1.jpg" height="50" width="50" />
				</div>

				<input type="text" placeholder=@(items.Count == 0 ? "what do you need ...?" : "what else do you need ...?") @bind="newItem" autofocus />
				
				<button class="delBtn" type="reset" @onclick="DeleteItems" disabled=@items.All(i => !i.IsDone)><i class="fas fa-trash-alt" style="font-size:24px"></i></button>
			</div>
		</form>
		<div class="dynDetails">
			<div class="selectAndCountRow">
				<div class="selectAllRow">
					<p class="selectAllRowCheckbox"><input type="checkbox" unchecked @bind="isAllDone" @onclick="IsAllDone" class="form-check-input" disabled=@(!items.Any()) /></p>

					@if(@isAllDone){
						<p class="selectAllRowText">Deselect All</p>
					}
					else
					{
						<p class="selectAllRowText">Select All</p>
					}
				</div>

				@if (@items.Count(item => !item.IsDone) == 1)
				{
					<h4 class="countItems"> (1 item to find)</h4>
				}
				else
				{
					<h4 class="countItems">(@items.Count(item => !item.IsDone) items to find)</h4>
				}

			</div>
			<ul class="list">
				@foreach (ShoppingListItem item in items)
				@* @foreach (ShoppingListItem item in items.OrderBy(x => x.Order)) --- only relevant if you want to maintain the original list order on reloading app*@ 
				{
					<li class="itemRow">
						<div class="itemDetail">
							<p class="rowCheckBox">
								<input type="checkbox" class="form-check-input" @bind="item.IsDone" />
							</p>
							<a class="item @ItemDone(item) @itemRowIsDoneClass">@item.Item</a>							
						</div>
						<div class="editAndDelBtns">
							<button class="editBtn"  @onclick="@(() => EditItem(item))" disabled=@item.IsDone>
								<i class="fa-regular fa-pen-to-square" style="font-size:24px;"></i>
							</button>
						</div>
					</li>
				}
			</ul>
		</div>
	</div>
</div>

@code
{
	List<ShoppingListItem> items = new List<ShoppingListItem>();
	string? newItem;
	bool isAllDone = false;
	public string itemRowIsDoneClass = "";
	public bool isChecked;

	public async void IsAllDone()
	{
		isChecked = isChecked ? false : true;

		foreach (ShoppingListItem item in items)
		{

			item.IsDone = isChecked ? true : false;
		}
		await ShoppingListService.SaveItems(items);
	}

	public async Task ItemDone(ShoppingListItem item)
	{
		if (!item.IsDone && isChecked)
		{
			isChecked = false;

		}

		isAllDone = false;
		var itemRowIsDoneResult = item.IsDone ? "item-done" : "";

		await ShoppingListService.SaveItems(items);

		itemRowIsDoneClass = itemRowIsDoneResult;
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		var itemList = ShoppingListService.LoadItems();
		items.AddRange(itemList);
	}

	async void AddItem()
	{
		if (string.IsNullOrWhiteSpace(newItem))
			return;

		items.Add(new ShoppingListItem
			{
				Order = items.Count +1,
				Item = newItem
			});

		await ShoppingListService.SaveItems(items);
		newItem = string.Empty;
	}

	async Task EditItem(ShoppingListItem item)
	{
		if (item.IsDone)
		{
			return;
		}
		else
		{
			string result = await Application.Current.MainPage.DisplayPromptAsync("Edit Item", "", initialValue: item.Item, maxLength: 100, keyboard: Keyboard.Default);

			if (result is not null)
			{
				item.Item = result;
				await ShoppingListService.SaveItems(items);
			}

		}

	}

	public async Task DeleteItems()
	{
		items.RemoveAll(i => i.IsDone);
		await ShoppingListService.SaveItems(items);
		isAllDone = false;
		StateHasChanged();
	}
}