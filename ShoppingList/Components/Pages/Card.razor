@page "/card"
@using ShoppingList.Data
@inject ShoppingListService ShoppingListService

<div class="shoppingCard" >
	<div class="headerInfo">
	<h1 >
		Shopping List 
	</h1>
	<h4 class="countItems">(@items.Count(item => !item.IsDone) items)</h4>
	</div>
	<form @onsubmit=AddItem>
		<div class="inputField">
			@* <i id="quill" class="fa-solid fa-feather-pointed fa-2x"></i> *@
			<input type="text" placeholder="what do you need?"  @bind="newItem" autofocus  />
			<button class="delBtn" type="reset" @onclick="DeleteItems"><i class="fas fa-trash-alt"></i></button>
		</div>
	</form>
	<div >
		<ul class="list">
			@foreach (ShoppingListItem item in items)
			{
				<li class="itemRow">
					<div class="itemDetail">
					<p class="rowCheckBox"><input type="checkbox" class="form-check-input"  @bind="item.IsDone" /></p>
					<p class="rowItem"><input @bind="item.Item"  class="item" /></p>
					</div>
					<p class="rowDel"><button class="delBtn" @onclick="DeleteItems"><i class="fa fa-times fa-2x"></i></button></p>
					
				</li>
			}
		</ul
	</div>
</div>



@code
{
	List<ShoppingListItem> items = new List<ShoppingListItem>();
	string? newItem;


	protected override void OnInitialized()
	{
		base.OnInitialized();
		var itemList = ShoppingListService.LoadItems();

		items.AddRange(itemList);
	}

	void AddItem()
	{

		if (string.IsNullOrWhiteSpace(newItem))
			return;

		items.Add(new ShoppingListItem
		{
			Item = newItem
		});

		ShoppingListService.SaveItems(items);
		newItem = string.Empty;
	}

	void  DeleteItems()
	{
		IEnumerable<ShoppingListItem> itemsToDelete = new List<ShoppingListItem>();
		itemsToDelete =  items.Where(i => !i.IsDone);
		ShoppingListService.SaveItems(itemsToDelete);
		items = new List<ShoppingListItem>();
		OnInitialized();

	}

	

}